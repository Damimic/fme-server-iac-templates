AWSTemplateFormatVersion: 2010-09-09
Description: Jira 2136 test template

Parameters:
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "The key pair that will be used if SSH access is required"

Resources:
  newVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  
  newInternetGateway:
    Type: AWS::EC2::InternetGateway
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId:
        Ref: newInternetGateway
      VpcId:
        Ref: newVPC

  newRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: newVPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: newRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref newInternetGateway

  newSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ca-central-1a
      VpcId: !Ref newVPC
      CidrBlock: 10.0.0.0/20
  
  dbSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ca-central-1b
      VpcId: !Ref newVPC
      CidrBlock: 10.0.16.0/20

  rdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for FME RDS DB
      SubnetIds:
        - !Ref newSubnet
        - !Ref dbSubnet
  
  associateSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: newRouteTable
      SubnetId:
        Ref: newSubnet

  newSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: template security group for ec2 instances
      GroupName: template-test
      VpcId:
        Ref: newVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7500
        ToPort: 7501
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7100
        ToPort: 7200
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7069
        ToPort: 7082
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 20
        ToPort: 22
        CidrIp: 0.0.0.0/0
      
  sgSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref newSG
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref newSG

  newRDS:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: 20
      AvailabilityZone: ca-central-1a
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref rdsDBSubnetGroup
      Engine: postgres
      LicenseModel: postgresql-license
      MasterUsername: postgres
      MasterUserPassword: postgres
      MultiAZ: false
      Port: 5432
      PubliclyAccessible: false
      VPCSecurityGroups: 
        - !Ref newSG

  newEFS:
    Type: AWS::EFS::FileSystem
    Properties: 
      AvailabilityZoneName: ca-central-1a
      PerformanceMode: generalPurpose

  newMountTarget:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref newEFS
      SecurityGroups: 
        - !Ref newSG
      SubnetId: !Ref newSubnet
  
  eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  mainServer:
    Type: AWS::EC2::Instance
    DependsOn:
      - newRDS
      - eip
      - newMountTarget
    Properties:
      AvailabilityZone: ca-central-1a
      ImageId: ami-0801628222e2e96d6
      InstanceType: t3.medium
      KeyName:
        Ref: KeyPair
      BlockDeviceMappings: 
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: "20"
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet:
            - !Ref newSG
          SubnetId: !Ref newSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          cd /
          apt-get update
          apt-get install -y zip unzip
          apt-get install -y git binutils make
          apt-get install -y postgresql-client
          git clone https://github.com/aws/efs-utils
          cd efs-utils
          make deb
          apt-get install -y ./build/amazon-efs-utils*deb
          cd /mnt
          mkdir efs
          cd efs
          mkdir fs1
          mount -t efs -o tls ${newEFS}:/ fs1
          chmod 777 fs1
          cd fs1
          printf "FEATURE_FMEServerDatabase_INSTALL=No\n" > install.cfg
          printf "FMESERVERHOSTNAME=${eip}\n" >> install.cfg
          printf "FMESERVERSHAREDDATA=/mnt/efs/fs1/fmeserver\n" >> install.cfg
          printf "DATABASETYPE=PostGreSQL\n" >> install.cfg
          printf "DATABASEHOST=${newRDS.Endpoint.Address}\n" >> install.cfg
          printf "DATABASEPORT=${newRDS.Endpoint.Port}\n" >> install.cfg
          printf "DATABASEUSER=fmeserver\n" >> install.cfg
          printf "DATABASEPASSWORD=fmeserver" >> install.cfg
          mkdir fmeserver
          chmod 777 fmeserver
          chown fmeserver /mnt/efs/fs1/fmeserver
          wget https://downloads.safe.com/fme/2021/fme-server-2021.1.3-b21631-linux~ubuntu.20.04.run
          mkdir /usr/share/desktop-directories/
          chmod +x ./fme-server-2021.1.3-b21631-linux~ubuntu.20.04.run
          ./fme-server-2021.1.3-b21631-linux~ubuntu.20.04.run -- --file install.cfg
          cd /opt/fmeserver/Server/database/postgresql
          export PGPASSWORD='postgres'; psql -U postgres -d postgres -h ${newRDS.Endpoint.Address} -p ${newRDS.Endpoint.Port} -c "CREATE USER fmeserver WITH PASSWORD 'fmeserver';" &> createUserLog.txt
          export PGPASSWORD='postgres'; psql -U postgres -d postgres -h ${newRDS.Endpoint.Address} -p ${newRDS.Endpoint.Port} -f postgresql_createDB.sql &> createDBLog.txt
          export PGPASSWORD='fmeserver'; psql -U fmeserver -d fmeserver -h ${newRDS.Endpoint.Address} -p ${newRDS.Endpoint.Port} -f postgresql_createSchema.sql &> createSchemaLog.txt
          cd /opt/fmeserver/Server
          ./startServer.sh
          now=$(date +"%T")
          echo "Current time : $now"
  
  engineServer:
    Type: AWS::EC2::Instance
    DependsOn: mainServer
    Properties:
      AvailabilityZone: ca-central-1a
      ImageId: ami-0801628222e2e96d6
      InstanceType: t3.medium
      KeyName: !Ref KeyPair
      NetworkInterfaces:
        - DeleteOnTermination: true
          AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref newSG
          SubnetId: !Ref newSubnet
      BlockDeviceMappings: 
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: "20"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          cd /
          apt-get update
          apt-get install -y zip unzip
          apt-get install -y git binutils make
          git clone https://github.com/aws/efs-utils
          cd efs-utils
          make deb
          apt-get install -y ./build/amazon-efs-utils*deb
          cd /mnt
          mkdir efs
          cd efs
          mkdir fs1
          mount -t efs -o tls ${newEFS}:/ fs1
          chmod 777 fs1
          cd fs1
          printf "FEATURE_FMEServerDatabase_INSTALL=No\n" > install_engine.cfg
          printf "FEATURE_Services_INSTALL=No\n" >> install_engine.cfg
          printf "FEATURE_ServerConsole_INSTALL=No\n" >> install_engine.cfg
          printf "FEATURE_FMEServerDatabase_INSTALL=No\n" >> install_engine.cfg
          dns=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
          printf "NODENAME=%s\n" $dns >> install_engine.cfg
          printf "FMESERVERHOSTNAME=${eip}\n" >> install_engine.cfg
          printf "FMESERVERSHAREDDATA=/mnt/efs/fs1/fmeserver\n" >> install_engine.cfg
          printf "DATABASETYPE=PostGreSQL\n" >> install_engine.cfg
          printf "DATABASEHOST=${newRDS.Endpoint.Address}\n" >> install_engine.cfg
          printf "DATABASEPORT=${newRDS.Endpoint.Port}\n" >> install_engine.cfg
          printf "DATABASEUSER=fmeserver\n" >> install_engine.cfg
          printf "DATABASEPASSWORD=fmeserver" >> install_engine.cfg
          sleep 600
          chmod +x ./fme-server-2021.1.3-b21631-linux~ubuntu.20.04.run
          chown fmeserver /mnt/efs/fs1/fmeserver
          mkdir /usr/share/desktop-directories/
          mkdir /opt/fmeserver/
          chmod 777 /opt/fmeserver/
          ./fme-server-2021.1.3-b21631-linux~ubuntu.20.04.run -- --file install_engine.cfg
          cd /opt/fmeserver/Server
          sed -i '/^TEMPLATE_START_ENGINE=/ s/$/ -ENGINE_TYPE DYNAMIC/' processMonitorConfigEngines.txt
          ./startEngines.sh

  associateEIP:
    Type: AWS::EC2::EIPAssociation
    Properties: 
      AllocationId: !GetAtt eip.AllocationId
      InstanceId: !Ref mainServer
